
function splitFileName(fileName: string) {
    const lastDotIndex = fileName.lastIndexOf('.');
    if (lastDotIndex === -1) return { name: fileName, extension: '' };
    return {
        name: fileName.substring(0, lastDotIndex),
        extension: fileName.substring(lastDotIndex + 1),
    };
}

function renderData(data: any) {
    const stateMap = new Map();

    function createList(folder: any, depth: number = 0) {
        const ul = document.createElement('ul');
        ul.classList.add('folder-list');

        const folderLi = document.createElement('li');
        folderLi.textContent = folder.name;
        folderLi.classList.add('folder-item');
        ul.appendChild(folderLi);

        // Add empty slots in extension columns for the folder
        const folderExtensionItem = document.createElement('div');
        folderExtensionItem.classList.add('extension-item', 'folder-slot');
        extensionColumn.appendChild(folderExtensionItem);

        // Add boolean column for folder
        const folderBooleanItem = document.createElement('div');
        folderBooleanItem.classList.add('boolean-item', 'folder-slot');
        booleanColumn.appendChild(folderBooleanItem);

        // Add comments column for folder
        const folderCommentsItem = document.createElement('div');
        folderCommentsItem.classList.add('comments-item', 'folder-slot');
        const folderCommentsInput = document.createElement('input');
        folderCommentsInput.type = 'text';
        folderCommentsInput.placeholder = 'Add comment...';
        folderCommentsInput.dataset.id = folder.id;
        folderCommentsInput.value = stateMap.get(folder.id)?.comment || '';
        folderCommentsInput.addEventListener('input', (e) => {
            const target = e.target as HTMLInputElement;
            updateState(folder.id, { comment: target.value });
        });
        folderCommentsItem.appendChild(folderCommentsInput);
        commentsColumn.appendChild(folderCommentsItem);

        if (folder.files && folder.files.length > 0) {
            const fileUl = document.createElement('ul');
            folder.files.forEach((file: any) => {
                const fileNameFormat = splitFileName(file.name);

                const fileLi = document.createElement('li');
                fileLi.classList.add('file-item');

                const nameSpan = document.createElement('span');
                nameSpan.classList.add('name-column');
                nameSpan.textContent = fileNameFormat.name;

                fileLi.appendChild(nameSpan);
                fileUl.appendChild(fileLi);

                // Add to extension column
                const extensionItem = document.createElement('div');
                extensionItem.classList.add('extension-item');
                extensionItem.textContent = fileNameFormat.extension;
                extensionColumn.appendChild(extensionItem);

                // Add to boolean column
                const booleanItem = document.createElement('div');
                booleanItem.classList.add('boolean-item');
                const booleanToggle = document.createElement('input');
                booleanToggle.type = 'checkbox';
                booleanToggle.checked = stateMap.get(file.id)?.active || false;
                booleanToggle.addEventListener('change', (e) => {
                    const target = e.target as HTMLInputElement;
                    updateState(file.id, { active: target.checked });
                });
                booleanItem.appendChild(booleanToggle);
                booleanColumn.appendChild(booleanItem);

                // Add to comments column
                const commentsItem = document.createElement('div');
                commentsItem.classList.add('comments-item');
                const commentsInput = document.createElement('input');
                commentsInput.type = 'text';
                commentsInput.placeholder = 'Add comment...';
                commentsInput.dataset.id = file.id;
                commentsInput.value = stateMap.get(file.id)?.comment || '';
                commentsInput.addEventListener('input', (e) => {
                    const target = e.target as HTMLInputElement;
                    updateState(file.id, { comment: target.value });
                });
                commentsItem.appendChild(commentsInput);
                commentsColumn.appendChild(commentsItem);
            });
            ul.appendChild(fileUl);
        }

        if (folder.folders && folder.folders.length > 0) {
            folder.folders.forEach((subFolder: any) => {
                const subFolderList = createList(subFolder, depth + 1);
                ul.appendChild(subFolderList);
            });
        }

        return ul;
    }

    function updateState(id: string, newState: { active?: boolean, comment?: string }) {
        const currentState = stateMap.get(id) || {};
        stateMap.set(id, { ...currentState, ...newState });
        console.log('Updated state:', id, stateMap.get(id));
    }

    const body = document.querySelector('body');
    const container = document.createElement('div');
    container.classList.add('folder-container');

    const folderStructure = document.createElement('div');
    folderStructure.classList.add('folder-structure');

    const columnsContainer = document.createElement('div');
    columnsContainer.classList.add('columns-container');

    const extensionColumn = document.createElement('div');
    extensionColumn.classList.add('extension-column');

    const booleanColumn = document.createElement('div');
    booleanColumn.classList.add('boolean-column');

    const commentsColumn = document.createElement('div');
    commentsColumn.classList.add('comments-column');

    const folderList = createList(data);
    folderStructure.appendChild(folderList);

    columnsContainer.appendChild(extensionColumn);
    columnsContainer.appendChild(booleanColumn);
    columnsContainer.appendChild(commentsColumn);

    container.appendChild(folderStructure);
    container.appendChild(columnsContainer);

    body?.appendChild(container);
}

export { renderData }